# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import data_transf_pb2 as data__transf__pb2


class DataTransfServiceStub(object):
    """The visualization service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GuiJIGuiHua = channel.unary_unary(
                '/data_transf.DataTransfService/GuiJIGuiHua',
                request_serializer=data__transf__pb2.GuiJiInfo.SerializeToString,
                response_deserializer=data__transf__pb2.BaseRespInfo.FromString,
                )
        self.SubscribeData = channel.unary_unary(
                '/data_transf.DataTransfService/SubscribeData',
                request_serializer=data__transf__pb2.SubscribeInfo.SerializeToString,
                response_deserializer=data__transf__pb2.BaseRespInfo.FromString,
                )
        self.ZNTStatusReceive = channel.unary_unary(
                '/data_transf.DataTransfService/ZNTStatusReceive',
                request_serializer=data__transf__pb2.ZNTStatusInfo.SerializeToString,
                response_deserializer=data__transf__pb2.BaseRespInfo.FromString,
                )
        self.ObstacleInfoReceive = channel.unary_unary(
                '/data_transf.DataTransfService/ObstacleInfoReceive',
                request_serializer=data__transf__pb2.ObstacleReq.SerializeToString,
                response_deserializer=data__transf__pb2.BaseRespInfo.FromString,
                )
        self.PersonInfoReceive = channel.unary_unary(
                '/data_transf.DataTransfService/PersonInfoReceive',
                request_serializer=data__transf__pb2.PersonReq.SerializeToString,
                response_deserializer=data__transf__pb2.BaseRespInfo.FromString,
                )
        self.RoadInfoReceive = channel.unary_unary(
                '/data_transf.DataTransfService/RoadInfoReceive',
                request_serializer=data__transf__pb2.RoadReq.SerializeToString,
                response_deserializer=data__transf__pb2.BaseRespInfo.FromString,
                )
        self.EquipInfoReceive = channel.unary_unary(
                '/data_transf.DataTransfService/EquipInfoReceive',
                request_serializer=data__transf__pb2.EquipReq.SerializeToString,
                response_deserializer=data__transf__pb2.BaseRespInfo.FromString,
                )


class DataTransfServiceServicer(object):
    """The visualization service definition.
    """

    def GuiJIGuiHua(self, request, context):
        """轨迹规划 协同控制模块调用 数据收发模块转发到智能体
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeData(self, request, context):
        """数据订阅 各个模块订阅数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZNTStatusReceive(self, request, context):
        """智能体状态接收 订阅智能体状态的模块实现该服务端接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObstacleInfoReceive(self, request, context):
        """障碍物信息，订阅障碍物数据的实现该接口
        update 2021.09.23 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PersonInfoReceive(self, request, context):
        """人员信息接收接口，订阅人员数据方实现该接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RoadInfoReceive(self, request, context):
        """道路信息接收接口，订阅道路数据方实现该接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EquipInfoReceive(self, request, context):
        """装备信息接收接口，订阅装备数据方实现该接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataTransfServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GuiJIGuiHua': grpc.unary_unary_rpc_method_handler(
                    servicer.GuiJIGuiHua,
                    request_deserializer=data__transf__pb2.GuiJiInfo.FromString,
                    response_serializer=data__transf__pb2.BaseRespInfo.SerializeToString,
            ),
            'SubscribeData': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeData,
                    request_deserializer=data__transf__pb2.SubscribeInfo.FromString,
                    response_serializer=data__transf__pb2.BaseRespInfo.SerializeToString,
            ),
            'ZNTStatusReceive': grpc.unary_unary_rpc_method_handler(
                    servicer.ZNTStatusReceive,
                    request_deserializer=data__transf__pb2.ZNTStatusInfo.FromString,
                    response_serializer=data__transf__pb2.BaseRespInfo.SerializeToString,
            ),
            'ObstacleInfoReceive': grpc.unary_unary_rpc_method_handler(
                    servicer.ObstacleInfoReceive,
                    request_deserializer=data__transf__pb2.ObstacleReq.FromString,
                    response_serializer=data__transf__pb2.BaseRespInfo.SerializeToString,
            ),
            'PersonInfoReceive': grpc.unary_unary_rpc_method_handler(
                    servicer.PersonInfoReceive,
                    request_deserializer=data__transf__pb2.PersonReq.FromString,
                    response_serializer=data__transf__pb2.BaseRespInfo.SerializeToString,
            ),
            'RoadInfoReceive': grpc.unary_unary_rpc_method_handler(
                    servicer.RoadInfoReceive,
                    request_deserializer=data__transf__pb2.RoadReq.FromString,
                    response_serializer=data__transf__pb2.BaseRespInfo.SerializeToString,
            ),
            'EquipInfoReceive': grpc.unary_unary_rpc_method_handler(
                    servicer.EquipInfoReceive,
                    request_deserializer=data__transf__pb2.EquipReq.FromString,
                    response_serializer=data__transf__pb2.BaseRespInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'data_transf.DataTransfService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataTransfService(object):
    """The visualization service definition.
    """

    @staticmethod
    def GuiJIGuiHua(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_transf.DataTransfService/GuiJIGuiHua',
            data__transf__pb2.GuiJiInfo.SerializeToString,
            data__transf__pb2.BaseRespInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_transf.DataTransfService/SubscribeData',
            data__transf__pb2.SubscribeInfo.SerializeToString,
            data__transf__pb2.BaseRespInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZNTStatusReceive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_transf.DataTransfService/ZNTStatusReceive',
            data__transf__pb2.ZNTStatusInfo.SerializeToString,
            data__transf__pb2.BaseRespInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObstacleInfoReceive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_transf.DataTransfService/ObstacleInfoReceive',
            data__transf__pb2.ObstacleReq.SerializeToString,
            data__transf__pb2.BaseRespInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PersonInfoReceive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_transf.DataTransfService/PersonInfoReceive',
            data__transf__pb2.PersonReq.SerializeToString,
            data__transf__pb2.BaseRespInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RoadInfoReceive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_transf.DataTransfService/RoadInfoReceive',
            data__transf__pb2.RoadReq.SerializeToString,
            data__transf__pb2.BaseRespInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EquipInfoReceive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/data_transf.DataTransfService/EquipInfoReceive',
            data__transf__pb2.EquipReq.SerializeToString,
            data__transf__pb2.BaseRespInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
